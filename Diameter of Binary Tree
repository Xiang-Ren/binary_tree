//543. Diameter of Binary Tree
//Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

//Example:
//Given a binary tree 
//          1
//         / \
//        2   3
//       / \     
//      4   5    
//Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
//Note: The length of path between two nodes is represented by the number of edges between them.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int depth;
    int longest_path = 0;
    
    int diam_depth(TreeNode* root, int& depth, int& longest_path)
    {
        if ( ! root ){
            
            depth = 0;
            return 0;
        }
        
        int depth_left = 0;
        int longest_path_left = 0; //Note initiaized to 0 is important
        int longest_path_right = 0; //Note initiaized to 0 is important
        if ( root -> left )
            diam_depth( root -> left, depth_left, longest_path_left);
        
        int depth_right = 0;
        if ( root -> right )
            diam_depth( root -> right, depth_right, longest_path_right);
        
        depth = max( depth_left, depth_right ) + 1;
        
        longest_path = max( depth_left + depth_right, longest_path_left );
        longest_path = max( longest_path, longest_path_right );
        
        return 0;
    }
    
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if ( !root ){
            return 0;
        }
        
        diam_depth(root, depth, longest_path);
        
        return longest_path;
    }
};
